#region Initializing any macros that are useful/related to obj_audio_component
#endregion

#region Initializing enumerators that are useful/related to obj_audio_component
#endregion

#region Initializing any globals that are useful/related to obj_audio_component
#endregion

#region The main object code for obj_audio_component

/// @param {Real} index		Unique value generated by GML during compilation that represents this struct asset.
function obj_audio_component(_index) : base_struct(_index) constructor{
	// Stores the unique ID value for the instance that this audio component is attached to. This allows
	// the component to always know exactly which instance is linked to them if the parent ever needs to
	// be referenced through the audio component.
	parentID = noone;
	
	// 
	x = 0;
	y = 0;
	
	// 
	falloffRefDist	= 0.0;
	falloffMaxDist	= 0.0;
	falloffFactor	= 0.0;
	
	// 
	emitterID	= audio_emitter_create();
	sound		= NO_SOUND;
	
	/// @description 
	cleanup = function(){
		audio_emitter_free(emitterID);
		emitterID = noone;
	}
	
	/// @description 
	/// @param {Asset.GMSound}	sound			The sound resource that will be played through the audio component.
	/// @param {Real}			soundType		What "type" the sound falls under (Determines output volume).
	/// @param {Real}			loop			If true, the sound will loop indefinitely (Deleting the audio component will stop the sound).
	/// @param {Real}			stopPrevious	If true, any previous sound that matches this one will be stopped.
	/// @param {Real}			gain			Volume of the sound relative to its type.
	/// @param {Real}			offset			Position into the sound to begin playing the audio at.
	/// @param {Real}			pitch			Amount to alter the pitch of the sound up or down by 
	play_sound = function(_sound, _soundType, _loop, _stopPrevious, _gain = 1.0, _offset = 0.0, _pitch = 1.0){
		sound = play_sound_effect_on(emitterID, _sound, falloffRefDist, falloffMaxDist, falloffFactor, 0, 
					false, true, _soundType, _gain, _offset, _pitch);
	}
}

#endregion

#region Global functions related to obj_audio_component

/// @description Creates an instance of the "obj_audio_component" struct; returning its pointer value to
/// wherever called the function so that it can be referenced, managed, or manipulated further. That pointer
/// is also stored in a global list that manages all existing light instances which aids with rendering.
/// @param {Real}	x
/// @param {Real}	y
/// @param {Real}	falloffRefDist
/// @param {Real}	falloffMaxDist
/// @param {Real}	falloffFactor
function create_audio_component(_x, _y, _falloffRefDist, _falloffMaxDist, _falloffFactor = 2.0){
	var _audio = instance_create_struct(obj_audio_component);
	with(_audio){
		x				= _x;
		y				= _y;
		falloffRefDist	= _falloffRefDist;
		falloffMaxDist	= _falloffMaxDist;
		falloffFactor	= _falloffFactor;
		audio_emitter_position(emitterID, _x, _y, 0);
		audio_emitter_falloff(emitterID, _falloffRefDist, _falloffMaxDist, _falloffFactor);
	}
	return _audio;
}


/// @description 
/// @param {Id.Instance}	emitterID	The pointer to the audio component struct that is being deleted.
function delete_audio_component(_emitterID){
	if (audioComponent != noone)
		instance_destroy_struct(_emitterID);
	return noone;
}

/// @description 
/// @param {Real}	x
/// @param {Real}	y
/// @param {Real}	offsetX
/// @param {Real}	offsetY
/// @param {Real}	falloffRefDist
/// @param {Real}	falloffMaxDist
/// @param {Real}	falloffFactor
function object_add_audio_component(_x, _y, _offsetX, _offsetY, _falloffRefDist, _falloffMaxDist, _falloffFactor = 1.0){
	if (audioComponent != noone)
		return;
		
	audioOffsetX = _offsetX;
	audioOffsetY = _offsetY;
	audioComponent = create_audio_component(_x + _offsetX, _y + _offsetY, 
							_falloffRefDist, _falloffMaxDist, _falloffFactor);
}

#endregion