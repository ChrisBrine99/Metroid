#region	Initializing any macros that are useful/related to obj_player_hud
#endregion

#region Initializing enumerators that are useful/related to obj_player_hud
#endregion

#region Initializing any globals that are useful/related to obj_player_hud
#endregion

#region The main object code for obj_player_hud

/// @param {Real} index		Unique value generated by GML during compilation that represents this struct asset.
function obj_game_hud(_index) : base_struct(_index) constructor{
	
	/// @description 
	draw_gui = function(){
		draw_player_info(2, 2, 1);
	}
	
	/// @description Displays the player's current energy along with their current energy tank sum--whether
	/// they are currently filled or empty. Also, the ammunition reserve for Samus's missiles and power bombs
	/// are also dispayed using this function. Her aeion gauge is also shown if she has access to it.
	/// @param {Real}	xPos	Starting x offset that all player info is displayed with regards to.
	/// @param {Real}	yPos	Starting y offset that all player info is displayed with regard to.
	/// @param {Real}	alpha	The overall visibility of player information displayed on the HUD.
	draw_player_info = function(_xPos, _yPos, _alpha){
		// 
		with(PLAYER){
			// Display the total energy the player currently has; ignoring any additions added by energy tanks
			// they may have picked up. Instead of using a font, two images are drawn for each numbers place; the
			// values in those places determined by the formulas in the "subimage" argument.
			var _energy = hitpoints % 100;
			draw_sprite_ext(spr_energy_numbers, floor(_energy * 0.1),	_xPos,		_yPos, 1, 1, 0, c_white, _alpha);	// Displays the tens place number.
			draw_sprite_ext(spr_energy_numbers, _energy % 10,			_xPos + 10, _yPos, 1, 1, 0, c_white, _alpha);	// Displays the ones place number.
			
			// 
			var _energyTanks = floor(hitpoints * 0.01);
			var _maxEnergyTanks = floor(maxHitpoints * 0.01);
			var _xx = _xPos + 21; // Each number is 10 pixels wide; times two; plus the one pixel gap between number value and tank icons.
			var _yy = (_maxEnergyTanks <= 6) ? _yPos + 3 : _yPos; // Adds three pixels to offset to center energy tank icons if there are less than seven total.
			for (var i = 0; i < _maxEnergyTanks; i++){
				draw_sprite_ext(spr_energy_tanks, (i < _energyTanks), 
					_xx + ((i % 6) * 6), _yy, 1, 1, 0, c_white, _alpha);
				if (i == 5) {_yy = _yPos + 6;} // Shifts the remaining icons after the first six down to their own row. 
			}
			
			// 
			var _xOffset = (_maxEnergyTanks < 6) ? _xx + (_maxEnergyTanks * 6) + 2 : _xx + 38;
			var _yOffset = _yPos + 2;
			if (event_get_flag(FLAG_MISSILES) && maxMissiles > 0){
				// 
				var _color = c_white;
				if (curWeapon == curMissile)	{_color = HEX_LIGHT_GREEN;}	// Highlight when missiles are being utilized.
				if (numMissiles == 0)			{_color = HEX_DARK_RED;}	// Highlight when no ammo remains.
				
				// 
				draw_sprite_ext(spr_missile_icon, 0, _xOffset, _yOffset - 1, 1, 1, 0, _color, _alpha);
				_xOffset += sprite_get_width(spr_missile_icon);
				
				// 
				var _strWidth = sprite_get_width(spr_ammo_numbers);
				draw_sprite_ext(spr_ammo_numbers, floor(numMissiles * 0.01),		_xOffset,					_yOffset, 1, 1, 0, _color, _alpha); // 100s column
				draw_sprite_ext(spr_ammo_numbers, floor((numMissiles % 100) * 0.1), _xOffset + _strWidth,		_yOffset, 1, 1, 0, _color, _alpha);	// 10s column
				draw_sprite_ext(spr_ammo_numbers, numMissiles % 10,					_xOffset + (_strWidth * 2), _yOffset, 1, 1, 0, _color, _alpha); // 1s column
				
				// 
				_xOffset += (_strWidth * 3) + 2;
			}
			
			// 
			if (event_get_flag(FLAG_POWER_BOMBS) && maxPowerBombs > 0){
				// 
				var _color = c_white;
				if (IS_ALT_WEAPON_HELD && IN_MORPHBALL)	{_color = HEX_LIGHT_GREEN;}	// Highlight whenever power bombs are being utilized.
				if (numPowerBombs == 0)					{_color = HEX_DARK_RED;}	// Highlight when there are no power bombs remaining.
				
				// 
				draw_sprite_ext(spr_power_bomb_icon, 0, _xOffset, _yOffset - 1, 1, 1, 0, _color, _alpha);
				_xOffset += sprite_get_width(spr_power_bomb_icon);
				
				// 
				draw_sprite_ext(spr_ammo_numbers, numPowerBombs* 0.1, _xOffset,											_yOffset, 1, 1, 0, _color, _alpha);	// 10s column
				draw_sprite_ext(spr_ammo_numbers, numPowerBombs % 10, _xOffset + sprite_get_width(spr_ammo_numbers),	_yOffset, 1, 1, 0, _color, _alpha); // 1s column
			}
		}
	}
}

#endregion

#region Global functions related to obj_player_hud
#endregion