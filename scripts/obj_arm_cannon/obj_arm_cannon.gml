/// @description Insert summary of this file here.

#region Initializing any macros that are useful/related to obj_arm_cannon
#endregion

#region Initializing enumerators that are useful/related to obj_arm_cannon
#endregion

#region Initializing any globals that are useful/related to obj_arm_cannon
#endregion

#region The main object code for obj_arm_cannon

/// @param {Real} index		Unique value generated by GML during compilation that represents this struct asset.
function obj_arm_cannon(_index) : base_struct(_index) constructor{
	// Much like Game Maker's own x and y variables, these store the current position of the camera within 
	// the current room. By default they are always set to a value of zero.
	x = 0;
	y = 0;
	
	// 
	image_xscale = 1;
	visible = false;
	
	// 
	imageIndex = 0;
	
	// 
	pID = noone;
	
	/// @description 
	end_step = function(){
		var _x = x;
		var _y = y;
		var _visible = true;
		var _imageXScale = image_xscale;
		var _imageIndex = imageIndex;
		with(pID){
			var _state = curState;
			switch(_state){
				default: // By default the arm cannon will not be rendered.
					_visible = false;
					break;
				case state_default:
					if (stateFlags & (1 << AIMING_UP)){
						_x = x - (1 * image_xscale);
						_y = y - 43;
						_imageIndex = 4;
						break;
					} else if (IS_MOVING){
						if (!IS_AIMING) {_visible = false;}
						_x = x + (9 * image_xscale);
						_y = y - 30;
						_imageIndex = 0;
						break;
					}
					_x = x + (5 * image_xscale);
					_y = y - 27;
					_imageIndex = 1;
					break;
				case state_airbourne:
					if (stateFlags & (1 << AIMING_UP)){
						_x = x - (1 * image_xscale);
						_y = y - 40;
						_imageIndex = 4;
						break;
					} else if (stateFlags & (1 << AIMING_DOWN)){
						_x = x;
						_y = y - 18;
						_imageIndex = 6;
						break;
					}
					if (IS_JUMP_SPIN) {_visible = false;}
					_x = x + (5 * image_xscale);
					_y = y - 25;
					_imageIndex = 1;
					break;
				case state_crouching:
					_x = x + (4 * image_xscale);
					_y = y - 17;
					_imageIndex = 1;
					break;
			}
			_imageXScale = image_xscale;
		}
		x = _x;
		y = _y;
		visible = _visible;
		image_xscale = _imageXScale;
		imageIndex = _imageIndex;
	}
	
	/// @description 
	draw = function(){
		if (!visible) {return;}
		draw_sprite_ext(spr_samus_cannon0, imageIndex, x, y, image_xscale, 1, 0, c_white, 1);
	}
}

#endregion

#region Global functions related to obj_arm_cannon
#endregion