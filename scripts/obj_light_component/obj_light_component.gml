#region Initializing any macros that are useful/related to obj_light_component

// A macro constant that prevents the deletion of a light source due to its lifespan value being at or going
// below a value of zero. This value will completely bypass the code for the optional mechanic.
#macro	INF_LIFESPAN		-75

#endregion

#region Initializing enumerators that are useful/related to obj_light_component
#endregion

#region Initializing any globals that are useful/related to obj_light_component
#endregion

#region The main object code for obj_light_component

/// @param {Real} index		Unique value generated by GML during compilation that represents this struct asset.
function obj_light_component(_index) : base_struct(_index) constructor{
	// Stores the unique ID value for the instance that this light component is attached to. This allows
	// the component to always know exactly which instance is linked to them if the parent ever needs to
	// be referenced through the light component.
	parentID = noone;
	
	// Create two variables for the coordinates of the light within the game world, which are identical to
	// the variable pair that is built into every Game Maker object by default.
	x = 0;
	y = 0;
	
	// Initialize the rest of the variable for the light component, which determines how large the light
	// source is; its color; the "strength" of the light at the origin; the "field of view" for the light,
	// which allows for directional light sources; and whether or not the light ir persistent--staying in
	// existence between various rooms.
	radius = 0;
	baseRadius = 0;
	color = HEX_WHITE;
	strength = 0;
	isPersistent = false;
	isActive = true;
	
	// The variables that manage the light component's optional flickering effect. This effect will alter
	// the radius of the light to be somewhere within the percentage range of the minimum and maximum flicker
	// values. The rate that is changes radius size to produce that "flicker" is based on the value stored in
	// the "flickerInterval" variable.
	minFlicker = 1;
	maxFlicker = 1;
	flickerInterval = 0;
	flickerTimer = 0;
	
	// Stores a timer (60 units = 1 second of real-world time) that counts down until it reaches zero. Once
	// zero has been reached or surpassed, the light component will automatically be deleted.
	lifespan = INF_LIFESPAN;
	
	/// @description Code that should be placed into the "Step" event of whatever object is controlling
	/// obj_light_component. It simply updates the variables and values associated with the optional effects
	/// that can be applied to a light source: lifespan and flickering.
	step = function(){
		// Update the value for the remaining lifespan of the light source if the value isn't currently the
		// default value for a light that never deletes itself, which is a macro defined at the top of this
		// file.
		if (lifespan != INF_LIFESPAN){
			lifespan -= DELTA_TIME;
			if (lifespan <= 0){
				with(parentID) {object_remove_light_component(true);}
				return;
			}
		}
		
		// Update the flicker effect, which will alter the radius randomly whenever the tiemr goes below or
		// reaches a value of zero. After that, a new radius is determined and the timer is reset based on
		// the determined speed of the effect.
		if (minFlicker != maxFlicker){
			flickerTimer -= DELTA_TIME;
			if (flickerTimer <= 0){
				flickerTimer = flickerInterval; // Reset the timer to whatever the flicker interval is.
				radius = baseRadius * random_range(minFlicker, maxFlicker);
			}
		}
	}
	
	/// @description A very simple function that allows the position of the light to be set in a single
	/// line rather than the two it would normally required for both axes.
	/// @param {Real}	x	The new position on the x-axis to place the light at.
	/// @param {Real}	y	The new position on the y-axis to place the light at.
	set_position = function(_x, _y){
		x = _x;
		y = _y;
	}
	
	/// @description Another very simple function that allows the base properties of the light source to be
	/// modifieed with a single line of code; modifying the size, color, and strength of the light.
	/// @param {Real}	radius		Size of the light and how far it will illumate within a given room.
	/// @param {Real}	color		The color hue for the light source.
	/// @param {Real}	strength	Determines the overall brightness of the light.
	set_properties = function(_radius, _color, _strength){
		radius =		_radius;
		baseRadius =	_radius;
		color =			_color;
		strength =		_strength;
	}
	
	/// @description Sets the light up to flicker. The "flicker" is achieved by randomly changing the radius of
	/// said light to be some random value within the range of the minimum and maximum flicker amount. This
	/// minimum and maximum is calculated based on the percentage they change the original radius by.
	/// @param {Real}	minFlicker			Smallest possible radius for the light as it flickers.
	/// @param {Real}	maxFlicker			Largest possible radius for the light as it flickers.
	/// @param {Real}	flickerInterval		Time (60 units = 1 real-world second) between each flicker change.
	apply_flicker = function(_minFlicker, _maxFlicker, _flickerInterval){
		minFlicker =		_minFlicker;
		maxFlicker =		_maxFlicker;
		flickerInterval =	_flickerInterval;
		flickerTimer =		_flickerInterval;
	}
	
	/// @description Applies the light's optional lifespan logic to the specific instance of light in question.
	/// After this, the lifespan value will count down until it reaches 0; destroying the light source so it's
	/// removed from the game world.
	/// @param {Real}	lifespan	Time (60 units = 1 real-world second) that the light has before it is destroyed.
	apply_lifespan = function(_lifespan){
		if (_lifespan > lifespan) {lifespan = _lifespan;}
	}
}

#endregion

#region Global functions related to obj_light_component

/// @description A simple function that creates a new light component struct; adding it to the ID storage
/// variable found on each entity object while also placing that same ID into the list used to render all of
/// those light sources from within "obj_effect_handler".
/// @param {Real}			x			Position on the x-axis to place the light at within the room.
/// @param {Real}			y			Position on the y-axis to place the light at within the room.
/// @param {Real}			offsetX		(Optional) Offset to place light at relative to base x position.
/// @param {Real}			offsetY		(Optional) Offset to place light at relative to base y position.
/// @param {Real}			radius		How far the light source will illuminate in the room.
/// @param {Constant.Color}	color		The cover for the light.
/// @param {Real}			strength	Determines the overall brightness of the light.
/// @param {Bool}			persistent	If true, the light source will not be deleted between rooms.
function object_add_light_component(_x, _y, _offsetX, _offsetY, _radius, _color, _strength = 1, _persistent = false){
	if (lightComponent == noone){
		lightOffsetX =		_offsetX;
		lightOffsetY =		_offsetY;
		lightComponent =	instance_create_struct(obj_light_component);
		var _parentID =		id;
		with(lightComponent){
			x =				_x + _offsetX;
			y =				_y + _offsetY;
			radius =		_radius;
			baseRadius =	_radius;
			color =			_color;
			strength =		_strength;
			isPersistent =	_persistent;
			parentID =		_parentID;
		}
		ds_list_add(global.lightSources, lightComponent);
	}
}

/// @description Another light component function that removes it from memory to prevent any leaking when the
/// parent entity is deleted or the pointer is lost from the global render list without explicitly telling
/// Game Maker to delete the struct. Putting this function in the entity's "Clean Up" event will prevent that
/// from ever being an issue.
/// @param {Bool}	removePersistent		Will delete the light source regardless of its persistence flag being set to "true".
function object_remove_light_component(_removePersistent = false){
	if (lightComponent != noone && (!lightComponent.isPersistent || _removePersistent)){
		var _index = ds_list_find_index(global.lightSources, lightComponent);
		if (_index != -1){
			instance_destroy_struct(lightComponent);
			delete global.lightSources[| _index];
			ds_list_delete(global.lightSources, _index);
			lightComponent = noone;
		}
	}
}

#endregion