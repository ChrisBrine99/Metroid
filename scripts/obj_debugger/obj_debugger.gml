#region Initializing any macros that are useful/related to obj_debugger

// 
#macro	DBG_SHOW_TIME			0
#macro	DBG_SHOW_GAME_STATE		1
#macro	DBG_SHOW_FPS			2
#macro	DBG_SHOW_RENDER			3
#macro	DBG_SHOW_ROOM			4
#macro	DBG_SHOW_CAMPOS			5
#macro	DBG_SHOW_INSTANCES		6
#macro	DBG_SHOW_COLLIDERS		30
#macro	DBG_SHOW_WINDOW			31

// 
#macro	CAN_SHOW_TIME			(stateFlags & (1 << DBG_SHOW_TIME))
#macro	CAN_SHOW_GAME_STATE		(stateFlags & (1 << DBG_SHOW_GAME_STATE))
#macro	CAN_SHOW_FPS			(stateFlags & (1 << DBG_SHOW_FPS))
#macro	CAN_SHOW_RENDER			(stateFlags & (1 << DBG_SHOW_RENDER))
#macro	CAN_SHOW_ROOM			(stateFlags & (1 << DBG_SHOW_ROOM))
#macro	CAN_SHOW_CAMPOS			(stateFlags & (1 << DBG_SHOW_CAMPOS))
#macro	CAN_SHOW_INSTANCES		(stateFlags & (1 << DBG_SHOW_INSTANCES))
#macro	CAN_SHOW_WINDOW			(stateFlags & (1 << DBG_SHOW_WINDOW))

// 
#macro	DBG_WINDOW_WIDTH		130
#macro	DBG_WINDOW_HEIGHT		168

// 
#macro	DBG_LINE_HEIGHT			10

#endregion

#region Initializing any globals that are useful/related to obj_debugger
#endregion

#region The main object code for obj_debugger

/// @param {Real} index		Unique value generated by GML during compilation that represents this struct asset.
function obj_debugger(_index) : base_struct(_index) constructor{
	// 
	stateFlags = 
		(1 << DBG_SHOW_TIME) |
		(1 << DBG_SHOW_GAME_STATE) |
		(1 << DBG_SHOW_FPS) | 
		(1 << DBG_SHOW_RENDER) |
		(1 << DBG_SHOW_ROOM) | 
		(1 << DBG_SHOW_CAMPOS) | 
		(1 << DBG_SHOW_INSTANCES);
	
	// 
	surfInfoWindow	= -1;
	scrollOffset	= 0;
	scrollLimit		= 0;
	
	// 
	lastRoom = room;
	
	// 
	console = instance_create_struct(obj_console);
	
	/// @description 
	end_step = function(){
		with(console)			{end_step();}
		if (!CAN_SHOW_WINDOW)	{return;}
		
		scrollOffset += (mouse_wheel_up() - mouse_wheel_down()) * DBG_LINE_HEIGHT;
		if (scrollOffset < scrollLimit) {scrollOffset = scrollLimit;}
		else if (scrollOffset > 0)		{scrollOffset = 0;}
	}
	
	/// @description 
	draw = function(){
		
	}
	
	/// @description 
	draw_gui = function(){
		// 
		with(console){
			draw_gui();
			if (IS_CONSOLE_ACTIVE) {return;}
		}
		
		// 
		if (!CAN_SHOW_WINDOW) {return;}
		var _yy			= scrollOffset + 2;
		var _fullHeight	= 0;
		var _dataNames	= "";
		var _dataVals	= "";
		
		// 
		if (!surface_exists(surfInfoWindow))
			surfInfoWindow = surface_create(DBG_WINDOW_WIDTH, DBG_WINDOW_HEIGHT);
		
		//
		var _camera			= CAMERA.camera;
		var _cameraHeight	= camera_get_view_height(_camera);
		draw_sprite_ext(spr_rectangle, 0, 0, 0, DBG_WINDOW_WIDTH, 12, 0, HEX_BLACK, 0.6);
		draw_sprite_ext(spr_rectangle, 0, 0, 0, DBG_WINDOW_WIDTH, _cameraHeight, 0, HEX_BLACK, 0.6);
		
		// 
		shader_set_outline(font_gui_small, RGB_DARK_RED);
		draw_set_halign(fa_center);
		draw_text_outline(DBG_WINDOW_WIDTH >> 1, 2, "--- Debug Info ---", HEX_RED, RGB_DARK_RED, 1);
		
		// 
		surface_set_target(surfInfoWindow);
		draw_clear_alpha(HEX_BLACK, 0.0);
		
		// 
		if (CAN_SHOW_TIME){
			_fullHeight += draw_debug_info(
				_yy + _fullHeight,
				"-- Time --\n Total\n In-Game",
				string_number_to_time_format(GAME_MANAGER.totalTime) + "\n" +
				string_number_to_time_format(GAME_MANAGER.curPlaytime), 
				3
			);
		}
		
		
		//
		if (CAN_SHOW_GAME_STATE){
			_fullHeight += draw_debug_info(
				_yy + _fullHeight,
				"-- Game State --\n Current\n Previous",
				game_state_get_name(GAME_CURRENT_STATE) + "\n" +
				game_state_get_name(GAME_PREVIOUS_STATE),
				3
			);
		}
		
		// 
		if (CAN_SHOW_FPS){
			_fullHeight += draw_debug_info(
				_yy + _fullHeight,
				"-- Frame Rate --\n FPS\n Delta Time",
				string(fps) + "\n" +
				string(DELTA_TIME),
				3
			);
		}
		
		// 
		if (CAN_SHOW_RENDER){
			var _dynamicEntities = 0;
			var _staticEntities	 = 0;
			with(par_dynamic_entity)	{_dynamicEntities += IS_ON_SCREEN;}
			with(par_static_entity)		{_staticEntities += IS_ON_SCREEN;}
			
			_fullHeight += draw_debug_info(
				_yy + _fullHeight,
				"-- Render --\n Entity (Dynamic)\n Entity (Static)\n Lights",
				string(_dynamicEntities) + "\n" +
				string(_staticEntities) + "\n" +
				string(global.lightsDrawn),
				4
			);
		}
		
		// 
		if (CAN_SHOW_ROOM){
			_fullHeight += draw_debug_info(
				_yy + _fullHeight,
				"-- Room --\n Current\n Last",
				room_get_name(room) + "\n" +
				room_get_name(lastRoom),
				3
			);
		}
		
		// 
		if (CAN_SHOW_CAMPOS){
			_fullHeight += draw_debug_info(
				_yy + _fullHeight,
				"-- Camera --\n Top-Left\n Center\n Size",
				"[" + string(camera_get_view_x(_camera)) + ", " + string(camera_get_view_y(_camera)) + "]\n" +
				"[" + string(CAMERA.x) + ", " + string(CAMERA.y) + "]\n" +
				"[" + string(camera_get_view_width(_camera)) + ", " + string(camera_get_view_height(_camera)) + "]",
				4
			);
		}
		
		// 
		if (CAN_SHOW_INSTANCES){
			_fullHeight += draw_debug_info(
				_yy + _fullHeight,
				"-- Objects --\n Instances\n Singletons\n Entities (Dynamic)\n Entities (Static)\n Structs",
				string(instance_count) + "\n" +
				string(ds_map_size(global.sInstances)) + "\n" +
				string(instance_number(par_dynamic_entity)) + "\n" +
				string(instance_number(par_static_entity)) + "\n" +
				string(ds_list_size(global.structs)),
				6
			);
		}
		
		// 
		surface_reset_target();
		shader_reset();
		draw_surface(surfInfoWindow, 0, 12);
		
		// 
		scrollLimit = -max(0, (_fullHeight + 10 - _cameraHeight));
	}
	
	/// @description 
	/// @param {Real}	y
	/// @param {String}	names
	/// @param {String}	values
	/// @param {Real}	totalLines
	draw_debug_info = function(_y, _names, _values, _totalLines){
		// 
		var _height	= DBG_LINE_HEIGHT * _totalLines;
		
		// 
		if (_y + _height > 0){
			draw_set_halign(fa_right);
			draw_text_outline(DBG_WINDOW_WIDTH - 5, _y + DBG_LINE_HEIGHT, _values, HEX_LIGHT_YELLOW, RGB_DARK_YELLOW, 1);
			draw_set_halign(fa_left);
			draw_text_outline(5, _y, _names, HEX_WHITE, RGB_GRAY, 1);
		}
		
		// 
		return _height;
	}
}

#endregion

#region Global functions related to obj_debugger

/// @description 
/// @param {Function}	state
function player_get_state_name(_state){
	if (object_index != obj_player) {return;}
	
	switch(_state){
		default:					return "NO_STATE";
		case state_intro:			return "state_intro";
		case state_default:			return "state_default";
		case state_airbourne:		return "state_airbourne";
		case state_crouching:		return "state_crouching";
		case state_morphball:		return "state_morphball";
		case state_enter_morphball:	return "state_enter_morphball";
	}
}

#endregion