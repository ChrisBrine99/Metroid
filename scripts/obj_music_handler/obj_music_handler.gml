#region	Initializing any macros that are useful/related to obj_music_handler

// A constant that replaces the default value for the music handler to know when no song is set to be played
// at the moment. Allows easier understanding of the code compared to random negative ones strewn about.
#macro	NO_SONG					   -1

// Two constrant values for different fading durations for the currently playing song's volume. The first
// is how long it takes for the previous song to fade out and the new song to fade in, while the second
// value represents how long the crossfading occurs for to minimize audio popping.
#macro	SONG_FADE_DURATION			2500
#macro	LOOP_CROSSFADE_LENGTH		100

#endregion

#region Initializing enumerators that are useful/related to obj_music_handler
#endregion

#region Initializing any globals that are useful/related to obj_music_handler
#endregion

#region The main object code for obj_music_handler

/// @param {Real} index		Unique value generated by GML during compilation that represents this struct asset.
function obj_music_handler(_index) : base_struct(_index) constructor{
	// 
	curSong = {
		song :			NO_SONG,
		songID :		-1,
		loopPosition :	0,
		loopLength :	0,
	};
	
	// 
	queuedSong = {
		song :			NO_SONG,
		songID :		-1,
		loopPosition :	0,
		loopLength :	0,
	};
	
	/// @description  Code that should be placed into the "Cleanup" event of whatever object is controlling
	/// obj_music_handler. In short, it just cleans up all the memory that was allocated by this struct to
	/// prevent any memory leaks during runtime.
	cleanup = function(){
		
	}
	
	/// @description Code that should be placed into the "End Step" event of whatever object is controlling
	/// obj_music_handler. In short, it is ran every frame; checking if a song switch needs to occur or if
	/// a crossfading loop has to be executed for the currently playing song.
	end_step = function(){
		
	}
}

#endregion

#region Global functions related to obj_music_handler
#endregion